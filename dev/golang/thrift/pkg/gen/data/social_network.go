// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package social_network

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_SE_CONNPOOL_TIMEOUT ErrorCode = 0
  ErrorCode_SE_THRIFT_CONN_ERROR ErrorCode = 1
  ErrorCode_SE_UNAUTHORIZED ErrorCode = 2
  ErrorCode_SE_MEMCACHED_ERROR ErrorCode = 3
  ErrorCode_SE_MONGODB_ERROR ErrorCode = 4
  ErrorCode_SE_REDIS_ERROR ErrorCode = 5
  ErrorCode_SE_THRIFT_HANDLER_ERROR ErrorCode = 6
  ErrorCode_SE_RABBITMQ_CONN_ERROR ErrorCode = 7
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_SE_CONNPOOL_TIMEOUT: return "SE_CONNPOOL_TIMEOUT"
  case ErrorCode_SE_THRIFT_CONN_ERROR: return "SE_THRIFT_CONN_ERROR"
  case ErrorCode_SE_UNAUTHORIZED: return "SE_UNAUTHORIZED"
  case ErrorCode_SE_MEMCACHED_ERROR: return "SE_MEMCACHED_ERROR"
  case ErrorCode_SE_MONGODB_ERROR: return "SE_MONGODB_ERROR"
  case ErrorCode_SE_REDIS_ERROR: return "SE_REDIS_ERROR"
  case ErrorCode_SE_THRIFT_HANDLER_ERROR: return "SE_THRIFT_HANDLER_ERROR"
  case ErrorCode_SE_RABBITMQ_CONN_ERROR: return "SE_RABBITMQ_CONN_ERROR"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "SE_CONNPOOL_TIMEOUT": return ErrorCode_SE_CONNPOOL_TIMEOUT, nil 
  case "SE_THRIFT_CONN_ERROR": return ErrorCode_SE_THRIFT_CONN_ERROR, nil 
  case "SE_UNAUTHORIZED": return ErrorCode_SE_UNAUTHORIZED, nil 
  case "SE_MEMCACHED_ERROR": return ErrorCode_SE_MEMCACHED_ERROR, nil 
  case "SE_MONGODB_ERROR": return ErrorCode_SE_MONGODB_ERROR, nil 
  case "SE_REDIS_ERROR": return ErrorCode_SE_REDIS_ERROR, nil 
  case "SE_THRIFT_HANDLER_ERROR": return ErrorCode_SE_THRIFT_HANDLER_ERROR, nil 
  case "SE_RABBITMQ_CONN_ERROR": return ErrorCode_SE_RABBITMQ_CONN_ERROR, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PostType int64
const (
  PostType_POST PostType = 0
  PostType_REPOST PostType = 1
  PostType_REPLY PostType = 2
  PostType_DM PostType = 3
)

func (p PostType) String() string {
  switch p {
  case PostType_POST: return "POST"
  case PostType_REPOST: return "REPOST"
  case PostType_REPLY: return "REPLY"
  case PostType_DM: return "DM"
  }
  return "<UNSET>"
}

func PostTypeFromString(s string) (PostType, error) {
  switch s {
  case "POST": return PostType_POST, nil 
  case "REPOST": return PostType_REPOST, nil 
  case "REPLY": return PostType_REPLY, nil 
  case "DM": return PostType_DM, nil 
  }
  return PostType(0), fmt.Errorf("not a valid PostType string")
}


func PostTypePtr(v PostType) *PostType { return &v }

func (p PostType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PostType) UnmarshalText(text []byte) error {
q, err := PostTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PostType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PostType(v)
return nil
}

func (p * PostType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - UserID
//  - FirstName
//  - LastName
//  - Username
//  - PasswordHashed
//  - Salt
type User struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  PasswordHashed string `thrift:"password_hashed,5" db:"password_hashed" json:"password_hashed"`
  Salt string `thrift:"salt,6" db:"salt" json:"salt"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetUserID() int64 {
  return p.UserID
}

func (p *User) GetFirstName() string {
  return p.FirstName
}

func (p *User) GetLastName() string {
  return p.LastName
}

func (p *User) GetUsername() string {
  return p.Username
}

func (p *User) GetPasswordHashed() string {
  return p.PasswordHashed
}

func (p *User) GetSalt() string {
  return p.Salt
}
func (p *User) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *User)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *User)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *User)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *User)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PasswordHashed = v
}
  return nil
}

func (p *User)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Salt = v
}
  return nil
}

func (p *User) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *User) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *User) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *User) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *User) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password_hashed", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password_hashed: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PasswordHashed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password_hashed (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password_hashed: ", p), err) }
  return err
}

func (p *User) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "salt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:salt: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Salt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.salt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:salt: ", p), err) }
  return err
}

func (p *User) Equals(other *User) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FirstName != other.FirstName { return false }
  if p.LastName != other.LastName { return false }
  if p.Username != other.Username { return false }
  if p.PasswordHashed != other.PasswordHashed { return false }
  if p.Salt != other.Salt { return false }
  return true
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
type ServiceException struct {
  ErrorCode ErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewServiceException() *ServiceException {
  return &ServiceException{}
}


func (p *ServiceException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *ServiceException) GetMessage() string {
  return p.Message
}
func (p *ServiceException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *ServiceException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ServiceException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *ServiceException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ServiceException) Equals(other *ServiceException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *ServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
  return p.String()
}

func (ServiceException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ServiceException)(nil)

// Attributes:
//  - MediaID
//  - MediaType
type Media struct {
  MediaID int64 `thrift:"media_id,1" db:"media_id" json:"media_id"`
  MediaType string `thrift:"media_type,2" db:"media_type" json:"media_type"`
}

func NewMedia() *Media {
  return &Media{}
}


func (p *Media) GetMediaID() int64 {
  return p.MediaID
}

func (p *Media) GetMediaType() string {
  return p.MediaType
}
func (p *Media) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Media)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MediaID = v
}
  return nil
}

func (p *Media)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MediaType = v
}
  return nil
}

func (p *Media) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Media"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Media) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:media_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MediaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:media_id: ", p), err) }
  return err
}

func (p *Media) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media_type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media_type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media_type: ", p), err) }
  return err
}

func (p *Media) Equals(other *Media) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MediaID != other.MediaID { return false }
  if p.MediaType != other.MediaType { return false }
  return true
}

func (p *Media) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Media(%+v)", *p)
}

// Attributes:
//  - ShortenedURL
//  - ExpandedURL
type URL struct {
  ShortenedURL string `thrift:"shortened_url,1" db:"shortened_url" json:"shortened_url"`
  ExpandedURL string `thrift:"expanded_url,2" db:"expanded_url" json:"expanded_url"`
}

func NewURL() *URL {
  return &URL{}
}


func (p *URL) GetShortenedURL() string {
  return p.ShortenedURL
}

func (p *URL) GetExpandedURL() string {
  return p.ExpandedURL
}
func (p *URL) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *URL)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ShortenedURL = v
}
  return nil
}

func (p *URL)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExpandedURL = v
}
  return nil
}

func (p *URL) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Url"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *URL) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "shortened_url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shortened_url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ShortenedURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shortened_url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shortened_url: ", p), err) }
  return err
}

func (p *URL) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expanded_url", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expanded_url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ExpandedURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expanded_url (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expanded_url: ", p), err) }
  return err
}

func (p *URL) Equals(other *URL) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ShortenedURL != other.ShortenedURL { return false }
  if p.ExpandedURL != other.ExpandedURL { return false }
  return true
}

func (p *URL) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("URL(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Username
type UserMention struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewUserMention() *UserMention {
  return &UserMention{}
}


func (p *UserMention) GetUserID() int64 {
  return p.UserID
}

func (p *UserMention) GetUsername() string {
  return p.Username
}
func (p *UserMention) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMention)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserMention)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserMention) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserMention"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMention) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *UserMention) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserMention) Equals(other *UserMention) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.Username != other.Username { return false }
  return true
}

func (p *UserMention) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMention(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Username
type Creator struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewCreator() *Creator {
  return &Creator{}
}


func (p *Creator) GetUserID() int64 {
  return p.UserID
}

func (p *Creator) GetUsername() string {
  return p.Username
}
func (p *Creator) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Creator)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *Creator)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *Creator) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Creator"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Creator) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *Creator) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *Creator) Equals(other *Creator) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.Username != other.Username { return false }
  return true
}

func (p *Creator) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Creator(%+v)", *p)
}

// Attributes:
//  - Text
//  - UserMentions
//  - Urls
type TextServiceReturn struct {
  Text string `thrift:"text,1" db:"text" json:"text"`
  UserMentions []*UserMention `thrift:"user_mentions,2" db:"user_mentions" json:"user_mentions"`
  Urls []*URL `thrift:"urls,3" db:"urls" json:"urls"`
}

func NewTextServiceReturn() *TextServiceReturn {
  return &TextServiceReturn{}
}


func (p *TextServiceReturn) GetText() string {
  return p.Text
}

func (p *TextServiceReturn) GetUserMentions() []*UserMention {
  return p.UserMentions
}

func (p *TextServiceReturn) GetUrls() []*URL {
  return p.Urls
}
func (p *TextServiceReturn) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceReturn)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TextServiceReturn)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.UserMentions =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UserMention{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.UserMentions = append(p.UserMentions, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TextServiceReturn)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.Urls =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &URL{}
    if err := _elem1.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Urls = append(p.Urls, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TextServiceReturn) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TextServiceReturn"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceReturn) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text: ", p), err) }
  return err
}

func (p *TextServiceReturn) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_mentions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_mentions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UserMentions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserMentions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_mentions: ", p), err) }
  return err
}

func (p *TextServiceReturn) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "urls", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:urls: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Urls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Urls {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:urls: ", p), err) }
  return err
}

func (p *TextServiceReturn) Equals(other *TextServiceReturn) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Text != other.Text { return false }
  if len(p.UserMentions) != len(other.UserMentions) { return false }
  for i, _tgt := range p.UserMentions {
    _src2 := other.UserMentions[i]
    if !_tgt.Equals(_src2) { return false }
  }
  if len(p.Urls) != len(other.Urls) { return false }
  for i, _tgt := range p.Urls {
    _src3 := other.Urls[i]
    if !_tgt.Equals(_src3) { return false }
  }
  return true
}

func (p *TextServiceReturn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceReturn(%+v)", *p)
}

// Attributes:
//  - PostID
//  - Creator
//  - ReqID
//  - Text
//  - UserMentions
//  - Media
//  - Urls
//  - Timestamp
//  - PostType
type Post struct {
  PostID int64 `thrift:"post_id,1" db:"post_id" json:"post_id"`
  Creator *Creator `thrift:"creator,2" db:"creator" json:"creator"`
  ReqID int64 `thrift:"req_id,3" db:"req_id" json:"req_id"`
  Text string `thrift:"text,4" db:"text" json:"text"`
  UserMentions []*UserMention `thrift:"user_mentions,5" db:"user_mentions" json:"user_mentions"`
  Media []*Media `thrift:"media,6" db:"media" json:"media"`
  Urls []*URL `thrift:"urls,7" db:"urls" json:"urls"`
  Timestamp int64 `thrift:"timestamp,8" db:"timestamp" json:"timestamp"`
  PostType PostType `thrift:"post_type,9" db:"post_type" json:"post_type"`
}

func NewPost() *Post {
  return &Post{}
}


func (p *Post) GetPostID() int64 {
  return p.PostID
}
var Post_Creator_DEFAULT *Creator
func (p *Post) GetCreator() *Creator {
  if !p.IsSetCreator() {
    return Post_Creator_DEFAULT
  }
return p.Creator
}

func (p *Post) GetReqID() int64 {
  return p.ReqID
}

func (p *Post) GetText() string {
  return p.Text
}

func (p *Post) GetUserMentions() []*UserMention {
  return p.UserMentions
}

func (p *Post) GetMedia() []*Media {
  return p.Media
}

func (p *Post) GetUrls() []*URL {
  return p.Urls
}

func (p *Post) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *Post) GetPostType() PostType {
  return p.PostType
}
func (p *Post) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *Post) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Post)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *Post)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Creator = &Creator{}
  if err := p.Creator.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
  }
  return nil
}

func (p *Post)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *Post)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Post)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.UserMentions =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &UserMention{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.UserMentions = append(p.UserMentions, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Post)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Media, 0, size)
  p.Media =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &Media{}
    if err := _elem5.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Media = append(p.Media, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Post)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.Urls =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &URL{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Urls = append(p.Urls, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Post)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Post)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := PostType(v)
  p.PostType = temp
}
  return nil
}

func (p *Post) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Post"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Post) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:post_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:post_id: ", p), err) }
  return err
}

func (p *Post) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creator: ", p), err) }
  if err := p.Creator.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creator: ", p), err) }
  return err
}

func (p *Post) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:req_id: ", p), err) }
  return err
}

func (p *Post) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  return err
}

func (p *Post) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_mentions", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_mentions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UserMentions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserMentions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_mentions: ", p), err) }
  return err
}

func (p *Post) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:media: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Media)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Media {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:media: ", p), err) }
  return err
}

func (p *Post) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "urls", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:urls: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Urls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Urls {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:urls: ", p), err) }
  return err
}

func (p *Post) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:timestamp: ", p), err) }
  return err
}

func (p *Post) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_type", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:post_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PostType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_type (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:post_type: ", p), err) }
  return err
}

func (p *Post) Equals(other *Post) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PostID != other.PostID { return false }
  if !p.Creator.Equals(other.Creator) { return false }
  if p.ReqID != other.ReqID { return false }
  if p.Text != other.Text { return false }
  if len(p.UserMentions) != len(other.UserMentions) { return false }
  for i, _tgt := range p.UserMentions {
    _src7 := other.UserMentions[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if len(p.Media) != len(other.Media) { return false }
  for i, _tgt := range p.Media {
    _src8 := other.Media[i]
    if !_tgt.Equals(_src8) { return false }
  }
  if len(p.Urls) != len(other.Urls) { return false }
  for i, _tgt := range p.Urls {
    _src9 := other.Urls[i]
    if !_tgt.Equals(_src9) { return false }
  }
  if p.Timestamp != other.Timestamp { return false }
  if p.PostType != other.PostType { return false }
  return true
}

func (p *Post) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Post(%+v)", *p)
}

type UniqueIdService interface {
  // Parameters:
  //  - ReqID
  //  - PostType
  //  - Carrier
  ComposeUniqueId(ctx context.Context, req_id int64, post_type PostType, carrier map[string]string) (_r int64, _err error)
}

type UniqueIdServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUniqueIdServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUniqueIdServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUniqueIdServiceClient(c thrift.TClient) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: c,
  }
}

func (p *UniqueIdServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UniqueIdServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UniqueIdServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - PostType
//  - Carrier
func (p *UniqueIdServiceClient) ComposeUniqueId(ctx context.Context, req_id int64, post_type PostType, carrier map[string]string) (_r int64, _err error) {
  var _args10 UniqueIdServiceComposeUniqueIdArgs
  _args10.ReqID = req_id
  _args10.PostType = post_type
  _args10.Carrier = carrier
  var _result12 UniqueIdServiceComposeUniqueIdResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "ComposeUniqueId", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  switch {
  case _result12.Se!= nil:
    return _r, _result12.Se
  }

  return _result12.GetSuccess(), nil
}

type UniqueIdServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UniqueIdService
}

func (p *UniqueIdServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UniqueIdServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UniqueIdServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUniqueIdServiceProcessor(handler UniqueIdService) *UniqueIdServiceProcessor {

  self13 := &UniqueIdServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self13.processorMap["ComposeUniqueId"] = &uniqueIdServiceProcessorComposeUniqueId{handler:handler}
return self13
}

func (p *UniqueIdServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x14.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x14

}

type uniqueIdServiceProcessorComposeUniqueId struct {
  handler UniqueIdService
}

func (p *uniqueIdServiceProcessorComposeUniqueId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UniqueIdServiceComposeUniqueIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeUniqueId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UniqueIdServiceComposeUniqueIdResult{}
  var retval int64
  if retval, err2 = p.handler.ComposeUniqueId(ctx, args.ReqID, args.PostType, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeUniqueId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeUniqueId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeUniqueId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - PostType
//  - Carrier
type UniqueIdServiceComposeUniqueIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostType PostType `thrift:"post_type,2" db:"post_type" json:"post_type"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUniqueIdServiceComposeUniqueIdArgs() *UniqueIdServiceComposeUniqueIdArgs {
  return &UniqueIdServiceComposeUniqueIdArgs{}
}


func (p *UniqueIdServiceComposeUniqueIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UniqueIdServiceComposeUniqueIdArgs) GetPostType() PostType {
  return p.PostType
}

func (p *UniqueIdServiceComposeUniqueIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UniqueIdServiceComposeUniqueIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PostType(v)
  p.PostType = temp
}
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.Carrier[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeUniqueId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PostType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_type: ", p), err) }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueIdServiceComposeUniqueIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UniqueIdServiceComposeUniqueIdResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUniqueIdServiceComposeUniqueIdResult() *UniqueIdServiceComposeUniqueIdResult {
  return &UniqueIdServiceComposeUniqueIdResult{}
}

var UniqueIdServiceComposeUniqueIdResult_Success_DEFAULT int64
func (p *UniqueIdServiceComposeUniqueIdResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return UniqueIdServiceComposeUniqueIdResult_Success_DEFAULT
  }
return *p.Success
}
var UniqueIdServiceComposeUniqueIdResult_Se_DEFAULT *ServiceException
func (p *UniqueIdServiceComposeUniqueIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UniqueIdServiceComposeUniqueIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UniqueIdServiceComposeUniqueIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeUniqueId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueIdServiceComposeUniqueIdResult(%+v)", *p)
}


type TextService interface {
  // Parameters:
  //  - ReqID
  //  - Text
  //  - Carrier
  ComposeText(ctx context.Context, req_id int64, text string, carrier map[string]string) (_r *TextServiceReturn, _err error)
}

type TextServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTextServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TextServiceClient {
  return &TextServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTextServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TextServiceClient {
  return &TextServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTextServiceClient(c thrift.TClient) *TextServiceClient {
  return &TextServiceClient{
    c: c,
  }
}

func (p *TextServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TextServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TextServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Text
//  - Carrier
func (p *TextServiceClient) ComposeText(ctx context.Context, req_id int64, text string, carrier map[string]string) (_r *TextServiceReturn, _err error) {
  var _args24 TextServiceComposeTextArgs
  _args24.ReqID = req_id
  _args24.Text = text
  _args24.Carrier = carrier
  var _result26 TextServiceComposeTextResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "ComposeText", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  switch {
  case _result26.Se!= nil:
    return _r, _result26.Se
  }

  if _ret27 := _result26.GetSuccess(); _ret27 != nil {
    return _ret27, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ComposeText failed: unknown result")
}

type TextServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TextService
}

func (p *TextServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TextServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TextServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTextServiceProcessor(handler TextService) *TextServiceProcessor {

  self28 := &TextServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self28.processorMap["ComposeText"] = &textServiceProcessorComposeText{handler:handler}
return self28
}

func (p *TextServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x29.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x29

}

type textServiceProcessorComposeText struct {
  handler TextService
}

func (p *textServiceProcessorComposeText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TextServiceComposeTextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeText", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TextServiceComposeTextResult{}
  var retval *TextServiceReturn
  if retval, err2 = p.handler.ComposeText(ctx, args.ReqID, args.Text, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeText: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeText", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeText", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Text
//  - Carrier
type TextServiceComposeTextArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewTextServiceComposeTextArgs() *TextServiceComposeTextArgs {
  return &TextServiceComposeTextArgs{}
}


func (p *TextServiceComposeTextArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *TextServiceComposeTextArgs) GetText() string {
  return p.Text
}

func (p *TextServiceComposeTextArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *TextServiceComposeTextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceComposeTextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *TextServiceComposeTextArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TextServiceComposeTextArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key30 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key30 = v
}
var _val31 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val31 = v
}
    p.Carrier[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TextServiceComposeTextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeText_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceComposeTextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *TextServiceComposeTextArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TextServiceComposeTextArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TextServiceComposeTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceComposeTextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type TextServiceComposeTextResult struct {
  Success *TextServiceReturn `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewTextServiceComposeTextResult() *TextServiceComposeTextResult {
  return &TextServiceComposeTextResult{}
}

var TextServiceComposeTextResult_Success_DEFAULT *TextServiceReturn
func (p *TextServiceComposeTextResult) GetSuccess() *TextServiceReturn {
  if !p.IsSetSuccess() {
    return TextServiceComposeTextResult_Success_DEFAULT
  }
return p.Success
}
var TextServiceComposeTextResult_Se_DEFAULT *ServiceException
func (p *TextServiceComposeTextResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return TextServiceComposeTextResult_Se_DEFAULT
  }
return p.Se
}
func (p *TextServiceComposeTextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TextServiceComposeTextResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *TextServiceComposeTextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceComposeTextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TextServiceReturn{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TextServiceComposeTextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *TextServiceComposeTextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeText_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceComposeTextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TextServiceComposeTextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *TextServiceComposeTextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceComposeTextResult(%+v)", *p)
}


type UserService interface {
  // Parameters:
  //  - ReqID
  //  - FirstName
  //  - LastName
  //  - Username
  //  - Password
  //  - Carrier
  RegisterUser(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - FirstName
  //  - LastName
  //  - Username
  //  - Password
  //  - UserID
  //  - Carrier
  RegisterUserWithId(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, user_id int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Password
  //  - Carrier
  Login(ctx context.Context, req_id int64, username string, password string, carrier map[string]string) (_r string, _err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Username
  //  - Carrier
  ComposeCreatorWithUserId(ctx context.Context, req_id int64, user_id int64, username string, carrier map[string]string) (_r *Creator, _err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Carrier
  ComposeCreatorWithUsername(ctx context.Context, req_id int64, username string, carrier map[string]string) (_r *Creator, _err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Carrier
  GetUserId(ctx context.Context, req_id int64, username string, carrier map[string]string) (_r int64, _err error)
}

type UserServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
  }
}

func (p *UserServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UserServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UserServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Carrier
func (p *UserServiceClient) RegisterUser(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, carrier map[string]string) (_err error) {
  var _args40 UserServiceRegisterUserArgs
  _args40.ReqID = req_id
  _args40.FirstName = first_name
  _args40.LastName = last_name
  _args40.Username = username
  _args40.Password = password
  _args40.Carrier = carrier
  var _result42 UserServiceRegisterUserResult
  var _meta41 thrift.ResponseMeta
  _meta41, _err = p.Client_().Call(ctx, "RegisterUser", &_args40, &_result42)
  p.SetLastResponseMeta_(_meta41)
  if _err != nil {
    return
  }
  switch {
  case _result42.Se!= nil:
    return _result42.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - UserID
//  - Carrier
func (p *UserServiceClient) RegisterUserWithId(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, user_id int64, carrier map[string]string) (_err error) {
  var _args43 UserServiceRegisterUserWithIdArgs
  _args43.ReqID = req_id
  _args43.FirstName = first_name
  _args43.LastName = last_name
  _args43.Username = username
  _args43.Password = password
  _args43.UserID = user_id
  _args43.Carrier = carrier
  var _result45 UserServiceRegisterUserWithIdResult
  var _meta44 thrift.ResponseMeta
  _meta44, _err = p.Client_().Call(ctx, "RegisterUserWithId", &_args43, &_result45)
  p.SetLastResponseMeta_(_meta44)
  if _err != nil {
    return
  }
  switch {
  case _result45.Se!= nil:
    return _result45.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - Username
//  - Password
//  - Carrier
func (p *UserServiceClient) Login(ctx context.Context, req_id int64, username string, password string, carrier map[string]string) (_r string, _err error) {
  var _args46 UserServiceLoginArgs
  _args46.ReqID = req_id
  _args46.Username = username
  _args46.Password = password
  _args46.Carrier = carrier
  var _result48 UserServiceLoginResult
  var _meta47 thrift.ResponseMeta
  _meta47, _err = p.Client_().Call(ctx, "Login", &_args46, &_result48)
  p.SetLastResponseMeta_(_meta47)
  if _err != nil {
    return
  }
  switch {
  case _result48.Se!= nil:
    return _r, _result48.Se
  }

  return _result48.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Username
//  - Carrier
func (p *UserServiceClient) ComposeCreatorWithUserId(ctx context.Context, req_id int64, user_id int64, username string, carrier map[string]string) (_r *Creator, _err error) {
  var _args49 UserServiceComposeCreatorWithUserIdArgs
  _args49.ReqID = req_id
  _args49.UserID = user_id
  _args49.Username = username
  _args49.Carrier = carrier
  var _result51 UserServiceComposeCreatorWithUserIdResult
  var _meta50 thrift.ResponseMeta
  _meta50, _err = p.Client_().Call(ctx, "ComposeCreatorWithUserId", &_args49, &_result51)
  p.SetLastResponseMeta_(_meta50)
  if _err != nil {
    return
  }
  switch {
  case _result51.Se!= nil:
    return _r, _result51.Se
  }

  if _ret52 := _result51.GetSuccess(); _ret52 != nil {
    return _ret52, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ComposeCreatorWithUserId failed: unknown result")
}

// Parameters:
//  - ReqID
//  - Username
//  - Carrier
func (p *UserServiceClient) ComposeCreatorWithUsername(ctx context.Context, req_id int64, username string, carrier map[string]string) (_r *Creator, _err error) {
  var _args53 UserServiceComposeCreatorWithUsernameArgs
  _args53.ReqID = req_id
  _args53.Username = username
  _args53.Carrier = carrier
  var _result55 UserServiceComposeCreatorWithUsernameResult
  var _meta54 thrift.ResponseMeta
  _meta54, _err = p.Client_().Call(ctx, "ComposeCreatorWithUsername", &_args53, &_result55)
  p.SetLastResponseMeta_(_meta54)
  if _err != nil {
    return
  }
  switch {
  case _result55.Se!= nil:
    return _r, _result55.Se
  }

  if _ret56 := _result55.GetSuccess(); _ret56 != nil {
    return _ret56, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ComposeCreatorWithUsername failed: unknown result")
}

// Parameters:
//  - ReqID
//  - Username
//  - Carrier
func (p *UserServiceClient) GetUserId(ctx context.Context, req_id int64, username string, carrier map[string]string) (_r int64, _err error) {
  var _args57 UserServiceGetUserIdArgs
  _args57.ReqID = req_id
  _args57.Username = username
  _args57.Carrier = carrier
  var _result59 UserServiceGetUserIdResult
  var _meta58 thrift.ResponseMeta
  _meta58, _err = p.Client_().Call(ctx, "GetUserId", &_args57, &_result59)
  p.SetLastResponseMeta_(_meta58)
  if _err != nil {
    return
  }
  switch {
  case _result59.Se!= nil:
    return _r, _result59.Se
  }

  return _result59.GetSuccess(), nil
}

type UserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

  self60 := &UserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self60.processorMap["RegisterUser"] = &userServiceProcessorRegisterUser{handler:handler}
  self60.processorMap["RegisterUserWithId"] = &userServiceProcessorRegisterUserWithId{handler:handler}
  self60.processorMap["Login"] = &userServiceProcessorLogin{handler:handler}
  self60.processorMap["ComposeCreatorWithUserId"] = &userServiceProcessorComposeCreatorWithUserId{handler:handler}
  self60.processorMap["ComposeCreatorWithUsername"] = &userServiceProcessorComposeCreatorWithUsername{handler:handler}
  self60.processorMap["GetUserId"] = &userServiceProcessorGetUserId{handler:handler}
return self60
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x61 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x61.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x61

}

type userServiceProcessorRegisterUser struct {
  handler UserService
}

func (p *userServiceProcessorRegisterUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceRegisterUserArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceRegisterUserResult{}
  if err2 = p.handler.RegisterUser(ctx, args.ReqID, args.FirstName, args.LastName, args.Username, args.Password, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterUser: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "RegisterUser", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorRegisterUserWithId struct {
  handler UserService
}

func (p *userServiceProcessorRegisterUserWithId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceRegisterUserWithIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterUserWithId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceRegisterUserWithIdResult{}
  if err2 = p.handler.RegisterUserWithId(ctx, args.ReqID, args.FirstName, args.LastName, args.Username, args.Password, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterUserWithId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "RegisterUserWithId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "RegisterUserWithId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorLogin struct {
  handler UserService
}

func (p *userServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceLoginArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceLoginResult{}
  var retval string
  if retval, err2 = p.handler.Login(ctx, args.ReqID, args.Username, args.Password, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "Login", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "Login", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorComposeCreatorWithUserId struct {
  handler UserService
}

func (p *userServiceProcessorComposeCreatorWithUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceComposeCreatorWithUserIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeCreatorWithUserId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceComposeCreatorWithUserIdResult{}
  var retval *Creator
  if retval, err2 = p.handler.ComposeCreatorWithUserId(ctx, args.ReqID, args.UserID, args.Username, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeCreatorWithUserId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeCreatorWithUserId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeCreatorWithUserId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorComposeCreatorWithUsername struct {
  handler UserService
}

func (p *userServiceProcessorComposeCreatorWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceComposeCreatorWithUsernameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeCreatorWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceComposeCreatorWithUsernameResult{}
  var retval *Creator
  if retval, err2 = p.handler.ComposeCreatorWithUsername(ctx, args.ReqID, args.Username, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeCreatorWithUsername: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeCreatorWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeCreatorWithUsername", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUserId struct {
  handler UserService
}

func (p *userServiceProcessorGetUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserIdArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetUserId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserServiceGetUserIdResult{}
  var retval int64
  if retval, err2 = p.handler.GetUserId(ctx, args.ReqID, args.Username, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserId: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetUserId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetUserId", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Carrier
type UserServiceRegisterUserArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  Carrier map[string]string `thrift:"carrier,6" db:"carrier" json:"carrier"`
}

func NewUserServiceRegisterUserArgs() *UserServiceRegisterUserArgs {
  return &UserServiceRegisterUserArgs{}
}


func (p *UserServiceRegisterUserArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceRegisterUserArgs) GetFirstName() string {
  return p.FirstName
}

func (p *UserServiceRegisterUserArgs) GetLastName() string {
  return p.LastName
}

func (p *UserServiceRegisterUserArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceRegisterUserArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceRegisterUserArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceRegisterUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key62 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key62 = v
}
var _val63 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val63 = v
}
    p.Carrier[_key62] = _val63
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceRegisterUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceRegisterUserResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceRegisterUserResult() *UserServiceRegisterUserResult {
  return &UserServiceRegisterUserResult{}
}

var UserServiceRegisterUserResult_Se_DEFAULT *ServiceException
func (p *UserServiceRegisterUserResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceRegisterUserResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceRegisterUserResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceRegisterUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceRegisterUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceRegisterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - UserID
//  - Carrier
type UserServiceRegisterUserWithIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  UserID int64 `thrift:"user_id,6" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,7" db:"carrier" json:"carrier"`
}

func NewUserServiceRegisterUserWithIdArgs() *UserServiceRegisterUserWithIdArgs {
  return &UserServiceRegisterUserWithIdArgs{}
}


func (p *UserServiceRegisterUserWithIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceRegisterUserWithIdArgs) GetFirstName() string {
  return p.FirstName
}

func (p *UserServiceRegisterUserWithIdArgs) GetLastName() string {
  return p.LastName
}

func (p *UserServiceRegisterUserWithIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceRegisterUserWithIdArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceRegisterUserWithIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserServiceRegisterUserWithIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceRegisterUserWithIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key64 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key64 = v
}
var _val65 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val65 = v
}
    p.Carrier[_key64] = _val65
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUserWithId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:user_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:carrier: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserWithIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceRegisterUserWithIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceRegisterUserWithIdResult() *UserServiceRegisterUserWithIdResult {
  return &UserServiceRegisterUserWithIdResult{}
}

var UserServiceRegisterUserWithIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceRegisterUserWithIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceRegisterUserWithIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceRegisterUserWithIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceRegisterUserWithIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegisterUserWithId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceRegisterUserWithIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserWithIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Password
//  - Carrier
type UserServiceLoginArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Password string `thrift:"password,3" db:"password" json:"password"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
  return &UserServiceLoginArgs{}
}


func (p *UserServiceLoginArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceLoginArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceLoginArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceLoginArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceLoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key66 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key66 = v
}
var _val67 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val67 = v
}
    p.Carrier[_key66] = _val67
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceLoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceLoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
  return &UserServiceLoginResult{}
}

var UserServiceLoginResult_Success_DEFAULT string
func (p *UserServiceLoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return UserServiceLoginResult_Success_DEFAULT
  }
return *p.Success
}
var UserServiceLoginResult_Se_DEFAULT *ServiceException
func (p *UserServiceLoginResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceLoginResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceLoginResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceLoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserServiceLoginResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceLoginResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Username
//  - Carrier
type UserServiceComposeCreatorWithUserIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Username string `thrift:"username,3" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewUserServiceComposeCreatorWithUserIdArgs() *UserServiceComposeCreatorWithUserIdArgs {
  return &UserServiceComposeCreatorWithUserIdArgs{}
}


func (p *UserServiceComposeCreatorWithUserIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceComposeCreatorWithUserIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserServiceComposeCreatorWithUserIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceComposeCreatorWithUserIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceComposeCreatorWithUserIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key68 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key68 = v
}
var _val69 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val69 = v
}
    p.Carrier[_key68] = _val69
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeCreatorWithUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceComposeCreatorWithUserIdResult struct {
  Success *Creator `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceComposeCreatorWithUserIdResult() *UserServiceComposeCreatorWithUserIdResult {
  return &UserServiceComposeCreatorWithUserIdResult{}
}

var UserServiceComposeCreatorWithUserIdResult_Success_DEFAULT *Creator
func (p *UserServiceComposeCreatorWithUserIdResult) GetSuccess() *Creator {
  if !p.IsSetSuccess() {
    return UserServiceComposeCreatorWithUserIdResult_Success_DEFAULT
  }
return p.Success
}
var UserServiceComposeCreatorWithUserIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceComposeCreatorWithUserIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceComposeCreatorWithUserIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceComposeCreatorWithUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Creator{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeCreatorWithUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUserIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Carrier
type UserServiceComposeCreatorWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserServiceComposeCreatorWithUsernameArgs() *UserServiceComposeCreatorWithUsernameArgs {
  return &UserServiceComposeCreatorWithUsernameArgs{}
}


func (p *UserServiceComposeCreatorWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceComposeCreatorWithUsernameArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceComposeCreatorWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceComposeCreatorWithUsernameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key70 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key70 = v
}
var _val71 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val71 = v
}
    p.Carrier[_key70] = _val71
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeCreatorWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceComposeCreatorWithUsernameResult struct {
  Success *Creator `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceComposeCreatorWithUsernameResult() *UserServiceComposeCreatorWithUsernameResult {
  return &UserServiceComposeCreatorWithUsernameResult{}
}

var UserServiceComposeCreatorWithUsernameResult_Success_DEFAULT *Creator
func (p *UserServiceComposeCreatorWithUsernameResult) GetSuccess() *Creator {
  if !p.IsSetSuccess() {
    return UserServiceComposeCreatorWithUsernameResult_Success_DEFAULT
  }
return p.Success
}
var UserServiceComposeCreatorWithUsernameResult_Se_DEFAULT *ServiceException
func (p *UserServiceComposeCreatorWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceComposeCreatorWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceComposeCreatorWithUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Creator{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeCreatorWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUsernameResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Carrier
type UserServiceGetUserIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserServiceGetUserIdArgs() *UserServiceGetUserIdArgs {
  return &UserServiceGetUserIdArgs{}
}


func (p *UserServiceGetUserIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceGetUserIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceGetUserIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceGetUserIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceGetUserIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceGetUserIdArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key72 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key72 = v
}
var _val73 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val73 = v
}
    p.Carrier[_key72] = _val73
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceGetUserIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceGetUserIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceGetUserIdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserServiceGetUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceGetUserIdResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceGetUserIdResult() *UserServiceGetUserIdResult {
  return &UserServiceGetUserIdResult{}
}

var UserServiceGetUserIdResult_Success_DEFAULT int64
func (p *UserServiceGetUserIdResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return UserServiceGetUserIdResult_Success_DEFAULT
  }
return *p.Success
}
var UserServiceGetUserIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceGetUserIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceGetUserIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceGetUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceGetUserIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserServiceGetUserIdResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceGetUserIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserIdResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserIdResult(%+v)", *p)
}


type ComposePostService interface {
  // Parameters:
  //  - ReqID
  //  - Username
  //  - UserID
  //  - Text
  //  - MediaIds
  //  - MediaTypes
  //  - PostType
  //  - Carrier
  ComposePost(ctx context.Context, req_id int64, username string, user_id int64, text string, media_ids []int64, media_types []string, post_type PostType, carrier map[string]string) (_err error)
}

type ComposePostServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewComposePostServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ComposePostServiceClient {
  return &ComposePostServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewComposePostServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ComposePostServiceClient {
  return &ComposePostServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewComposePostServiceClient(c thrift.TClient) *ComposePostServiceClient {
  return &ComposePostServiceClient{
    c: c,
  }
}

func (p *ComposePostServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *ComposePostServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ComposePostServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Username
//  - UserID
//  - Text
//  - MediaIds
//  - MediaTypes
//  - PostType
//  - Carrier
func (p *ComposePostServiceClient) ComposePost(ctx context.Context, req_id int64, username string, user_id int64, text string, media_ids []int64, media_types []string, post_type PostType, carrier map[string]string) (_err error) {
  var _args131 ComposePostServiceComposePostArgs
  _args131.ReqID = req_id
  _args131.Username = username
  _args131.UserID = user_id
  _args131.Text = text
  _args131.MediaIds = media_ids
  _args131.MediaTypes = media_types
  _args131.PostType = post_type
  _args131.Carrier = carrier
  var _result133 ComposePostServiceComposePostResult
  var _meta132 thrift.ResponseMeta
  _meta132, _err = p.Client_().Call(ctx, "ComposePost", &_args131, &_result133)
  p.SetLastResponseMeta_(_meta132)
  if _err != nil {
    return
  }
  switch {
  case _result133.Se!= nil:
    return _result133.Se
  }

  return nil
}

type ComposePostServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ComposePostService
}

func (p *ComposePostServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ComposePostServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ComposePostServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewComposePostServiceProcessor(handler ComposePostService) *ComposePostServiceProcessor {

  self134 := &ComposePostServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self134.processorMap["ComposePost"] = &composePostServiceProcessorComposePost{handler:handler}
return self134
}

func (p *ComposePostServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x135 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x135.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x135

}

type composePostServiceProcessorComposePost struct {
  handler ComposePostService
}

func (p *composePostServiceProcessorComposePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ComposePostServiceComposePostArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposePost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ComposePostServiceComposePostResult{}
  if err2 = p.handler.ComposePost(ctx, args.ReqID, args.Username, args.UserID, args.Text, args.MediaIds, args.MediaTypes, args.PostType, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposePost: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposePost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposePost", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Username
//  - UserID
//  - Text
//  - MediaIds
//  - MediaTypes
//  - PostType
//  - Carrier
type ComposePostServiceComposePostArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  UserID int64 `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Text string `thrift:"text,4" db:"text" json:"text"`
  MediaIds []int64 `thrift:"media_ids,5" db:"media_ids" json:"media_ids"`
  MediaTypes []string `thrift:"media_types,6" db:"media_types" json:"media_types"`
  PostType PostType `thrift:"post_type,7" db:"post_type" json:"post_type"`
  Carrier map[string]string `thrift:"carrier,8" db:"carrier" json:"carrier"`
}

func NewComposePostServiceComposePostArgs() *ComposePostServiceComposePostArgs {
  return &ComposePostServiceComposePostArgs{}
}


func (p *ComposePostServiceComposePostArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposePostServiceComposePostArgs) GetUsername() string {
  return p.Username
}

func (p *ComposePostServiceComposePostArgs) GetUserID() int64 {
  return p.UserID
}

func (p *ComposePostServiceComposePostArgs) GetText() string {
  return p.Text
}

func (p *ComposePostServiceComposePostArgs) GetMediaIds() []int64 {
  return p.MediaIds
}

func (p *ComposePostServiceComposePostArgs) GetMediaTypes() []string {
  return p.MediaTypes
}

func (p *ComposePostServiceComposePostArgs) GetPostType() PostType {
  return p.PostType
}

func (p *ComposePostServiceComposePostArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposePostServiceComposePostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.MediaIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem136 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem136 = v
}
    p.MediaIds = append(p.MediaIds, _elem136)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MediaTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem137 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem137 = v
}
    p.MediaTypes = append(p.MediaTypes, _elem137)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PostType(v)
  p.PostType = temp
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key138 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key138 = v
}
var _val139 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val139 = v
}
    p.Carrier[_key138] = _val139
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposePost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposePostServiceComposePostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media_ids", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:media_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.MediaIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:media_ids: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media_types", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:media_types: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MediaTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaTypes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:media_types: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_type", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:post_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PostType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:post_type: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:carrier: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposePostServiceComposePostArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposePostServiceComposePostResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposePostServiceComposePostResult() *ComposePostServiceComposePostResult {
  return &ComposePostServiceComposePostResult{}
}

var ComposePostServiceComposePostResult_Se_DEFAULT *ServiceException
func (p *ComposePostServiceComposePostResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposePostServiceComposePostResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposePostServiceComposePostResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposePostServiceComposePostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposePostServiceComposePostResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposePostServiceComposePostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposePost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposePostServiceComposePostResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposePostServiceComposePostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposePostServiceComposePostResult(%+v)", *p)
}


type PostStorageService interface {
  // Parameters:
  //  - ReqID
  //  - Post
  //  - Carrier
  StorePost(ctx context.Context, req_id int64, post *Post, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - PostID
  //  - Carrier
  ReadPost(ctx context.Context, req_id int64, post_id int64, carrier map[string]string) (_r *Post, _err error)
  // Parameters:
  //  - ReqID
  //  - PostIds
  //  - Carrier
  ReadPosts(ctx context.Context, req_id int64, post_ids []int64, carrier map[string]string) (_r []*Post, _err error)
}

type PostStorageServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewPostStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PostStorageServiceClient {
  return &PostStorageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPostStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PostStorageServiceClient {
  return &PostStorageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPostStorageServiceClient(c thrift.TClient) *PostStorageServiceClient {
  return &PostStorageServiceClient{
    c: c,
  }
}

func (p *PostStorageServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *PostStorageServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *PostStorageServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Post
//  - Carrier
func (p *PostStorageServiceClient) StorePost(ctx context.Context, req_id int64, post *Post, carrier map[string]string) (_err error) {
  var _args162 PostStorageServiceStorePostArgs
  _args162.ReqID = req_id
  _args162.Post = post
  _args162.Carrier = carrier
  var _result164 PostStorageServiceStorePostResult
  var _meta163 thrift.ResponseMeta
  _meta163, _err = p.Client_().Call(ctx, "StorePost", &_args162, &_result164)
  p.SetLastResponseMeta_(_meta163)
  if _err != nil {
    return
  }
  switch {
  case _result164.Se!= nil:
    return _result164.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - PostID
//  - Carrier
func (p *PostStorageServiceClient) ReadPost(ctx context.Context, req_id int64, post_id int64, carrier map[string]string) (_r *Post, _err error) {
  var _args165 PostStorageServiceReadPostArgs
  _args165.ReqID = req_id
  _args165.PostID = post_id
  _args165.Carrier = carrier
  var _result167 PostStorageServiceReadPostResult
  var _meta166 thrift.ResponseMeta
  _meta166, _err = p.Client_().Call(ctx, "ReadPost", &_args165, &_result167)
  p.SetLastResponseMeta_(_meta166)
  if _err != nil {
    return
  }
  switch {
  case _result167.Se!= nil:
    return _r, _result167.Se
  }

  if _ret168 := _result167.GetSuccess(); _ret168 != nil {
    return _ret168, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ReadPost failed: unknown result")
}

// Parameters:
//  - ReqID
//  - PostIds
//  - Carrier
func (p *PostStorageServiceClient) ReadPosts(ctx context.Context, req_id int64, post_ids []int64, carrier map[string]string) (_r []*Post, _err error) {
  var _args169 PostStorageServiceReadPostsArgs
  _args169.ReqID = req_id
  _args169.PostIds = post_ids
  _args169.Carrier = carrier
  var _result171 PostStorageServiceReadPostsResult
  var _meta170 thrift.ResponseMeta
  _meta170, _err = p.Client_().Call(ctx, "ReadPosts", &_args169, &_result171)
  p.SetLastResponseMeta_(_meta170)
  if _err != nil {
    return
  }
  switch {
  case _result171.Se!= nil:
    return _r, _result171.Se
  }

  return _result171.GetSuccess(), nil
}

type PostStorageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PostStorageService
}

func (p *PostStorageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PostStorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PostStorageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPostStorageServiceProcessor(handler PostStorageService) *PostStorageServiceProcessor {

  self172 := &PostStorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self172.processorMap["StorePost"] = &postStorageServiceProcessorStorePost{handler:handler}
  self172.processorMap["ReadPost"] = &postStorageServiceProcessorReadPost{handler:handler}
  self172.processorMap["ReadPosts"] = &postStorageServiceProcessorReadPosts{handler:handler}
return self172
}

func (p *PostStorageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x173 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x173.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x173

}

type postStorageServiceProcessorStorePost struct {
  handler PostStorageService
}

func (p *postStorageServiceProcessorStorePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PostStorageServiceStorePostArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "StorePost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PostStorageServiceStorePostResult{}
  if err2 = p.handler.StorePost(ctx, args.ReqID, args.Post, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StorePost: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "StorePost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "StorePost", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type postStorageServiceProcessorReadPost struct {
  handler PostStorageService
}

func (p *postStorageServiceProcessorReadPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PostStorageServiceReadPostArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PostStorageServiceReadPostResult{}
  var retval *Post
  if retval, err2 = p.handler.ReadPost(ctx, args.ReqID, args.PostID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPost: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ReadPost", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type postStorageServiceProcessorReadPosts struct {
  handler PostStorageService
}

func (p *postStorageServiceProcessorReadPosts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PostStorageServiceReadPostsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPosts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := PostStorageServiceReadPostsResult{}
  var retval []*Post
  if retval, err2 = p.handler.ReadPosts(ctx, args.ReqID, args.PostIds, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPosts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadPosts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ReadPosts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Post
//  - Carrier
type PostStorageServiceStorePostArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Post *Post `thrift:"post,2" db:"post" json:"post"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPostStorageServiceStorePostArgs() *PostStorageServiceStorePostArgs {
  return &PostStorageServiceStorePostArgs{}
}


func (p *PostStorageServiceStorePostArgs) GetReqID() int64 {
  return p.ReqID
}
var PostStorageServiceStorePostArgs_Post_DEFAULT *Post
func (p *PostStorageServiceStorePostArgs) GetPost() *Post {
  if !p.IsSetPost() {
    return PostStorageServiceStorePostArgs_Post_DEFAULT
  }
return p.Post
}

func (p *PostStorageServiceStorePostArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PostStorageServiceStorePostArgs) IsSetPost() bool {
  return p.Post != nil
}

func (p *PostStorageServiceStorePostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PostStorageServiceStorePostArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Post = &Post{}
  if err := p.Post.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Post), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key174 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key174 = v
}
var _val175 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val175 = v
}
    p.Carrier[_key174] = _val175
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PostStorageServiceStorePostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorePost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceStorePostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PostStorageServiceStorePostArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post: ", p), err) }
  if err := p.Post.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Post), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post: ", p), err) }
  return err
}

func (p *PostStorageServiceStorePostArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PostStorageServiceStorePostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceStorePostArgs(%+v)", *p)
}

// Attributes:
//  - Se
type PostStorageServiceStorePostResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPostStorageServiceStorePostResult() *PostStorageServiceStorePostResult {
  return &PostStorageServiceStorePostResult{}
}

var PostStorageServiceStorePostResult_Se_DEFAULT *ServiceException
func (p *PostStorageServiceStorePostResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PostStorageServiceStorePostResult_Se_DEFAULT
  }
return p.Se
}
func (p *PostStorageServiceStorePostResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PostStorageServiceStorePostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StorePost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceStorePostResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceStorePostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceStorePostResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - PostID
//  - Carrier
type PostStorageServiceReadPostArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostID int64 `thrift:"post_id,2" db:"post_id" json:"post_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPostStorageServiceReadPostArgs() *PostStorageServiceReadPostArgs {
  return &PostStorageServiceReadPostArgs{}
}


func (p *PostStorageServiceReadPostArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PostStorageServiceReadPostArgs) GetPostID() int64 {
  return p.PostID
}

func (p *PostStorageServiceReadPostArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PostStorageServiceReadPostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PostStorageServiceReadPostArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *PostStorageServiceReadPostArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key176 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key176 = v
}
var _val177 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val177 = v
}
    p.Carrier[_key176] = _val177
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_id: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type PostStorageServiceReadPostResult struct {
  Success *Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPostStorageServiceReadPostResult() *PostStorageServiceReadPostResult {
  return &PostStorageServiceReadPostResult{}
}

var PostStorageServiceReadPostResult_Success_DEFAULT *Post
func (p *PostStorageServiceReadPostResult) GetSuccess() *Post {
  if !p.IsSetSuccess() {
    return PostStorageServiceReadPostResult_Success_DEFAULT
  }
return p.Success
}
var PostStorageServiceReadPostResult_Se_DEFAULT *ServiceException
func (p *PostStorageServiceReadPostResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PostStorageServiceReadPostResult_Se_DEFAULT
  }
return p.Se
}
func (p *PostStorageServiceReadPostResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PostStorageServiceReadPostResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PostStorageServiceReadPostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Post{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - PostIds
//  - Carrier
type PostStorageServiceReadPostsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostIds []int64 `thrift:"post_ids,2" db:"post_ids" json:"post_ids"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPostStorageServiceReadPostsArgs() *PostStorageServiceReadPostsArgs {
  return &PostStorageServiceReadPostsArgs{}
}


func (p *PostStorageServiceReadPostsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PostStorageServiceReadPostsArgs) GetPostIds() []int64 {
  return p.PostIds
}

func (p *PostStorageServiceReadPostsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PostStorageServiceReadPostsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PostStorageServiceReadPostsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.PostIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem178 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem178 = v
}
    p.PostIds = append(p.PostIds, _elem178)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key179 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key179 = v
}
var _val180 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val180 = v
}
    p.Carrier[_key179] = _val180
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.PostIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PostIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_ids: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type PostStorageServiceReadPostsResult struct {
  Success []*Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPostStorageServiceReadPostsResult() *PostStorageServiceReadPostsResult {
  return &PostStorageServiceReadPostsResult{}
}

var PostStorageServiceReadPostsResult_Success_DEFAULT []*Post

func (p *PostStorageServiceReadPostsResult) GetSuccess() []*Post {
  return p.Success
}
var PostStorageServiceReadPostsResult_Se_DEFAULT *ServiceException
func (p *PostStorageServiceReadPostsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PostStorageServiceReadPostsResult_Se_DEFAULT
  }
return p.Se
}
func (p *PostStorageServiceReadPostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PostStorageServiceReadPostsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PostStorageServiceReadPostsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Post, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem181 := &Post{}
    if err := _elem181.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem181), err)
    }
    p.Success = append(p.Success, _elem181)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadPosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostsResult(%+v)", *p)
}


type HomeTimelineService interface {
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Start
  //  - Stop
  //  - Carrier
  ReadHomeTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (_r []*Post, _err error)
  // Parameters:
  //  - ReqID
  //  - PostID
  //  - UserID
  //  - Timestamp
  //  - UserMentionsID
  //  - Carrier
  WriteHomeTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, user_mentions_id []int64, carrier map[string]string) (_err error)
}

type HomeTimelineServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewHomeTimelineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HomeTimelineServiceClient {
  return &HomeTimelineServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHomeTimelineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HomeTimelineServiceClient {
  return &HomeTimelineServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHomeTimelineServiceClient(c thrift.TClient) *HomeTimelineServiceClient {
  return &HomeTimelineServiceClient{
    c: c,
  }
}

func (p *HomeTimelineServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *HomeTimelineServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *HomeTimelineServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
func (p *HomeTimelineServiceClient) ReadHomeTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (_r []*Post, _err error) {
  var _args216 HomeTimelineServiceReadHomeTimelineArgs
  _args216.ReqID = req_id
  _args216.UserID = user_id
  _args216.Start = start
  _args216.Stop = stop
  _args216.Carrier = carrier
  var _result218 HomeTimelineServiceReadHomeTimelineResult
  var _meta217 thrift.ResponseMeta
  _meta217, _err = p.Client_().Call(ctx, "ReadHomeTimeline", &_args216, &_result218)
  p.SetLastResponseMeta_(_meta217)
  if _err != nil {
    return
  }
  switch {
  case _result218.Se!= nil:
    return _r, _result218.Se
  }

  return _result218.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - UserMentionsID
//  - Carrier
func (p *HomeTimelineServiceClient) WriteHomeTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, user_mentions_id []int64, carrier map[string]string) (_err error) {
  var _args219 HomeTimelineServiceWriteHomeTimelineArgs
  _args219.ReqID = req_id
  _args219.PostID = post_id
  _args219.UserID = user_id
  _args219.Timestamp = timestamp
  _args219.UserMentionsID = user_mentions_id
  _args219.Carrier = carrier
  var _result221 HomeTimelineServiceWriteHomeTimelineResult
  var _meta220 thrift.ResponseMeta
  _meta220, _err = p.Client_().Call(ctx, "WriteHomeTimeline", &_args219, &_result221)
  p.SetLastResponseMeta_(_meta220)
  if _err != nil {
    return
  }
  switch {
  case _result221.Se!= nil:
    return _result221.Se
  }

  return nil
}

type HomeTimelineServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler HomeTimelineService
}

func (p *HomeTimelineServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HomeTimelineServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HomeTimelineServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHomeTimelineServiceProcessor(handler HomeTimelineService) *HomeTimelineServiceProcessor {

  self222 := &HomeTimelineServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self222.processorMap["ReadHomeTimeline"] = &homeTimelineServiceProcessorReadHomeTimeline{handler:handler}
  self222.processorMap["WriteHomeTimeline"] = &homeTimelineServiceProcessorWriteHomeTimeline{handler:handler}
return self222
}

func (p *HomeTimelineServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x223 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x223.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x223

}

type homeTimelineServiceProcessorReadHomeTimeline struct {
  handler HomeTimelineService
}

func (p *homeTimelineServiceProcessorReadHomeTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HomeTimelineServiceReadHomeTimelineArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := HomeTimelineServiceReadHomeTimelineResult{}
  var retval []*Post
  if retval, err2 = p.handler.ReadHomeTimeline(ctx, args.ReqID, args.UserID, args.Start, args.Stop, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadHomeTimeline: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ReadHomeTimeline", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type homeTimelineServiceProcessorWriteHomeTimeline struct {
  handler HomeTimelineService
}

func (p *homeTimelineServiceProcessorWriteHomeTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HomeTimelineServiceWriteHomeTimelineArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WriteHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := HomeTimelineServiceWriteHomeTimelineResult{}
  if err2 = p.handler.WriteHomeTimeline(ctx, args.ReqID, args.PostID, args.UserID, args.Timestamp, args.UserMentionsID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteHomeTimeline: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WriteHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WriteHomeTimeline", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
type HomeTimelineServiceReadHomeTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Start int32 `thrift:"start,3" db:"start" json:"start"`
  Stop int32 `thrift:"stop,4" db:"stop" json:"stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewHomeTimelineServiceReadHomeTimelineArgs() *HomeTimelineServiceReadHomeTimelineArgs {
  return &HomeTimelineServiceReadHomeTimelineArgs{}
}


func (p *HomeTimelineServiceReadHomeTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetStart() int32 {
  return p.Start
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetStop() int32 {
  return p.Stop
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *HomeTimelineServiceReadHomeTimelineArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key224 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key224 = v
}
var _val225 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val225 = v
}
    p.Carrier[_key224] = _val225
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadHomeTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceReadHomeTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type HomeTimelineServiceReadHomeTimelineResult struct {
  Success []*Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewHomeTimelineServiceReadHomeTimelineResult() *HomeTimelineServiceReadHomeTimelineResult {
  return &HomeTimelineServiceReadHomeTimelineResult{}
}

var HomeTimelineServiceReadHomeTimelineResult_Success_DEFAULT []*Post

func (p *HomeTimelineServiceReadHomeTimelineResult) GetSuccess() []*Post {
  return p.Success
}
var HomeTimelineServiceReadHomeTimelineResult_Se_DEFAULT *ServiceException
func (p *HomeTimelineServiceReadHomeTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return HomeTimelineServiceReadHomeTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *HomeTimelineServiceReadHomeTimelineResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Post, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem226 := &Post{}
    if err := _elem226.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem226), err)
    }
    p.Success = append(p.Success, _elem226)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadHomeTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceReadHomeTimelineResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - UserMentionsID
//  - Carrier
type HomeTimelineServiceWriteHomeTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostID int64 `thrift:"post_id,2" db:"post_id" json:"post_id"`
  UserID int64 `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  UserMentionsID []int64 `thrift:"user_mentions_id,5" db:"user_mentions_id" json:"user_mentions_id"`
  Carrier map[string]string `thrift:"carrier,6" db:"carrier" json:"carrier"`
}

func NewHomeTimelineServiceWriteHomeTimelineArgs() *HomeTimelineServiceWriteHomeTimelineArgs {
  return &HomeTimelineServiceWriteHomeTimelineArgs{}
}


func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetPostID() int64 {
  return p.PostID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetUserMentionsID() []int64 {
  return p.UserMentionsID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *HomeTimelineServiceWriteHomeTimelineArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.UserMentionsID =  tSlice
  for i := 0; i < size; i ++ {
var _elem227 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem227 = v
}
    p.UserMentionsID = append(p.UserMentionsID, _elem227)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key228 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key228 = v
}
var _val229 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val229 = v
}
    p.Carrier[_key228] = _val229
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteHomeTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_mentions_id", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_mentions_id: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.UserMentionsID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserMentionsID {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_mentions_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceWriteHomeTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Se
type HomeTimelineServiceWriteHomeTimelineResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewHomeTimelineServiceWriteHomeTimelineResult() *HomeTimelineServiceWriteHomeTimelineResult {
  return &HomeTimelineServiceWriteHomeTimelineResult{}
}

var HomeTimelineServiceWriteHomeTimelineResult_Se_DEFAULT *ServiceException
func (p *HomeTimelineServiceWriteHomeTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return HomeTimelineServiceWriteHomeTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *HomeTimelineServiceWriteHomeTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteHomeTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceWriteHomeTimelineResult(%+v)", *p)
}


type UserTimelineService interface {
  // Parameters:
  //  - ReqID
  //  - PostID
  //  - UserID
  //  - Timestamp
  //  - Carrier
  WriteUserTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Start
  //  - Stop
  //  - Carrier
  ReadUserTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (_r []*Post, _err error)
}

type UserTimelineServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUserTimelineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserTimelineServiceClient {
  return &UserTimelineServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserTimelineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserTimelineServiceClient {
  return &UserTimelineServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserTimelineServiceClient(c thrift.TClient) *UserTimelineServiceClient {
  return &UserTimelineServiceClient{
    c: c,
  }
}

func (p *UserTimelineServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UserTimelineServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UserTimelineServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - Carrier
func (p *UserTimelineServiceClient) WriteUserTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, carrier map[string]string) (_err error) {
  var _args256 UserTimelineServiceWriteUserTimelineArgs
  _args256.ReqID = req_id
  _args256.PostID = post_id
  _args256.UserID = user_id
  _args256.Timestamp = timestamp
  _args256.Carrier = carrier
  var _result258 UserTimelineServiceWriteUserTimelineResult
  var _meta257 thrift.ResponseMeta
  _meta257, _err = p.Client_().Call(ctx, "WriteUserTimeline", &_args256, &_result258)
  p.SetLastResponseMeta_(_meta257)
  if _err != nil {
    return
  }
  switch {
  case _result258.Se!= nil:
    return _result258.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
func (p *UserTimelineServiceClient) ReadUserTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (_r []*Post, _err error) {
  var _args259 UserTimelineServiceReadUserTimelineArgs
  _args259.ReqID = req_id
  _args259.UserID = user_id
  _args259.Start = start
  _args259.Stop = stop
  _args259.Carrier = carrier
  var _result261 UserTimelineServiceReadUserTimelineResult
  var _meta260 thrift.ResponseMeta
  _meta260, _err = p.Client_().Call(ctx, "ReadUserTimeline", &_args259, &_result261)
  p.SetLastResponseMeta_(_meta260)
  if _err != nil {
    return
  }
  switch {
  case _result261.Se!= nil:
    return _r, _result261.Se
  }

  return _result261.GetSuccess(), nil
}

type UserTimelineServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserTimelineService
}

func (p *UserTimelineServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserTimelineServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserTimelineServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserTimelineServiceProcessor(handler UserTimelineService) *UserTimelineServiceProcessor {

  self262 := &UserTimelineServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self262.processorMap["WriteUserTimeline"] = &userTimelineServiceProcessorWriteUserTimeline{handler:handler}
  self262.processorMap["ReadUserTimeline"] = &userTimelineServiceProcessorReadUserTimeline{handler:handler}
return self262
}

func (p *UserTimelineServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x263 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x263.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x263

}

type userTimelineServiceProcessorWriteUserTimeline struct {
  handler UserTimelineService
}

func (p *userTimelineServiceProcessorWriteUserTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserTimelineServiceWriteUserTimelineArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "WriteUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserTimelineServiceWriteUserTimelineResult{}
  if err2 = p.handler.WriteUserTimeline(ctx, args.ReqID, args.PostID, args.UserID, args.Timestamp, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteUserTimeline: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "WriteUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "WriteUserTimeline", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type userTimelineServiceProcessorReadUserTimeline struct {
  handler UserTimelineService
}

func (p *userTimelineServiceProcessorReadUserTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserTimelineServiceReadUserTimelineArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserTimelineServiceReadUserTimelineResult{}
  var retval []*Post
  if retval, err2 = p.handler.ReadUserTimeline(ctx, args.ReqID, args.UserID, args.Start, args.Stop, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadUserTimeline: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ReadUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ReadUserTimeline", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - Carrier
type UserTimelineServiceWriteUserTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostID int64 `thrift:"post_id,2" db:"post_id" json:"post_id"`
  UserID int64 `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewUserTimelineServiceWriteUserTimelineArgs() *UserTimelineServiceWriteUserTimelineArgs {
  return &UserTimelineServiceWriteUserTimelineArgs{}
}


func (p *UserTimelineServiceWriteUserTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetPostID() int64 {
  return p.PostID
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserTimelineServiceWriteUserTimelineArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key264 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key264 = v
}
var _val265 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val265 = v
}
    p.Carrier[_key264] = _val265
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteUserTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "post_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceWriteUserTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserTimelineServiceWriteUserTimelineResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserTimelineServiceWriteUserTimelineResult() *UserTimelineServiceWriteUserTimelineResult {
  return &UserTimelineServiceWriteUserTimelineResult{}
}

var UserTimelineServiceWriteUserTimelineResult_Se_DEFAULT *ServiceException
func (p *UserTimelineServiceWriteUserTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserTimelineServiceWriteUserTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserTimelineServiceWriteUserTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserTimelineServiceWriteUserTimelineResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WriteUserTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceWriteUserTimelineResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
type UserTimelineServiceReadUserTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Start int32 `thrift:"start,3" db:"start" json:"start"`
  Stop int32 `thrift:"stop,4" db:"stop" json:"stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewUserTimelineServiceReadUserTimelineArgs() *UserTimelineServiceReadUserTimelineArgs {
  return &UserTimelineServiceReadUserTimelineArgs{}
}


func (p *UserTimelineServiceReadUserTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetStart() int32 {
  return p.Start
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetStop() int32 {
  return p.Stop
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserTimelineServiceReadUserTimelineArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key266 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key266 = v
}
var _val267 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val267 = v
}
    p.Carrier[_key266] = _val267
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadUserTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceReadUserTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserTimelineServiceReadUserTimelineResult struct {
  Success []*Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserTimelineServiceReadUserTimelineResult() *UserTimelineServiceReadUserTimelineResult {
  return &UserTimelineServiceReadUserTimelineResult{}
}

var UserTimelineServiceReadUserTimelineResult_Success_DEFAULT []*Post

func (p *UserTimelineServiceReadUserTimelineResult) GetSuccess() []*Post {
  return p.Success
}
var UserTimelineServiceReadUserTimelineResult_Se_DEFAULT *ServiceException
func (p *UserTimelineServiceReadUserTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserTimelineServiceReadUserTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserTimelineServiceReadUserTimelineResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserTimelineServiceReadUserTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserTimelineServiceReadUserTimelineResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Post, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem268 := &Post{}
    if err := _elem268.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem268), err)
    }
    p.Success = append(p.Success, _elem268)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadUserTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserTimelineServiceReadUserTimelineResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserTimelineServiceReadUserTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceReadUserTimelineResult(%+v)", *p)
}


type SocialGraphService interface {
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  GetFollowers(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_r []int64, _err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  GetFollowees(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_r []int64, _err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - FolloweeID
  //  - Carrier
  Follow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - FolloweeID
  //  - Carrier
  Unfollow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserUsernmae
  //  - FolloweeUsername
  //  - Carrier
  FollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserUsernmae
  //  - FolloweeUsername
  //  - Carrier
  UnfollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (_err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  InsertUser(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_err error)
}

type SocialGraphServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewSocialGraphServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SocialGraphServiceClient {
  return &SocialGraphServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSocialGraphServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SocialGraphServiceClient {
  return &SocialGraphServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSocialGraphServiceClient(c thrift.TClient) *SocialGraphServiceClient {
  return &SocialGraphServiceClient{
    c: c,
  }
}

func (p *SocialGraphServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *SocialGraphServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *SocialGraphServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *SocialGraphServiceClient) GetFollowers(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_r []int64, _err error) {
  var _args289 SocialGraphServiceGetFollowersArgs
  _args289.ReqID = req_id
  _args289.UserID = user_id
  _args289.Carrier = carrier
  var _result291 SocialGraphServiceGetFollowersResult
  var _meta290 thrift.ResponseMeta
  _meta290, _err = p.Client_().Call(ctx, "GetFollowers", &_args289, &_result291)
  p.SetLastResponseMeta_(_meta290)
  if _err != nil {
    return
  }
  switch {
  case _result291.Se!= nil:
    return _r, _result291.Se
  }

  return _result291.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *SocialGraphServiceClient) GetFollowees(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_r []int64, _err error) {
  var _args292 SocialGraphServiceGetFolloweesArgs
  _args292.ReqID = req_id
  _args292.UserID = user_id
  _args292.Carrier = carrier
  var _result294 SocialGraphServiceGetFolloweesResult
  var _meta293 thrift.ResponseMeta
  _meta293, _err = p.Client_().Call(ctx, "GetFollowees", &_args292, &_result294)
  p.SetLastResponseMeta_(_meta293)
  if _err != nil {
    return
  }
  switch {
  case _result294.Se!= nil:
    return _r, _result294.Se
  }

  return _result294.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
func (p *SocialGraphServiceClient) Follow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (_err error) {
  var _args295 SocialGraphServiceFollowArgs
  _args295.ReqID = req_id
  _args295.UserID = user_id
  _args295.FolloweeID = followee_id
  _args295.Carrier = carrier
  var _result297 SocialGraphServiceFollowResult
  var _meta296 thrift.ResponseMeta
  _meta296, _err = p.Client_().Call(ctx, "Follow", &_args295, &_result297)
  p.SetLastResponseMeta_(_meta296)
  if _err != nil {
    return
  }
  switch {
  case _result297.Se!= nil:
    return _result297.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
func (p *SocialGraphServiceClient) Unfollow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (_err error) {
  var _args298 SocialGraphServiceUnfollowArgs
  _args298.ReqID = req_id
  _args298.UserID = user_id
  _args298.FolloweeID = followee_id
  _args298.Carrier = carrier
  var _result300 SocialGraphServiceUnfollowResult
  var _meta299 thrift.ResponseMeta
  _meta299, _err = p.Client_().Call(ctx, "Unfollow", &_args298, &_result300)
  p.SetLastResponseMeta_(_meta299)
  if _err != nil {
    return
  }
  switch {
  case _result300.Se!= nil:
    return _result300.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
func (p *SocialGraphServiceClient) FollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (_err error) {
  var _args301 SocialGraphServiceFollowWithUsernameArgs
  _args301.ReqID = req_id
  _args301.UserUsernmae = user_usernmae
  _args301.FolloweeUsername = followee_username
  _args301.Carrier = carrier
  var _result303 SocialGraphServiceFollowWithUsernameResult
  var _meta302 thrift.ResponseMeta
  _meta302, _err = p.Client_().Call(ctx, "FollowWithUsername", &_args301, &_result303)
  p.SetLastResponseMeta_(_meta302)
  if _err != nil {
    return
  }
  switch {
  case _result303.Se!= nil:
    return _result303.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
func (p *SocialGraphServiceClient) UnfollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (_err error) {
  var _args304 SocialGraphServiceUnfollowWithUsernameArgs
  _args304.ReqID = req_id
  _args304.UserUsernmae = user_usernmae
  _args304.FolloweeUsername = followee_username
  _args304.Carrier = carrier
  var _result306 SocialGraphServiceUnfollowWithUsernameResult
  var _meta305 thrift.ResponseMeta
  _meta305, _err = p.Client_().Call(ctx, "UnfollowWithUsername", &_args304, &_result306)
  p.SetLastResponseMeta_(_meta305)
  if _err != nil {
    return
  }
  switch {
  case _result306.Se!= nil:
    return _result306.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *SocialGraphServiceClient) InsertUser(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (_err error) {
  var _args307 SocialGraphServiceInsertUserArgs
  _args307.ReqID = req_id
  _args307.UserID = user_id
  _args307.Carrier = carrier
  var _result309 SocialGraphServiceInsertUserResult
  var _meta308 thrift.ResponseMeta
  _meta308, _err = p.Client_().Call(ctx, "InsertUser", &_args307, &_result309)
  p.SetLastResponseMeta_(_meta308)
  if _err != nil {
    return
  }
  switch {
  case _result309.Se!= nil:
    return _result309.Se
  }

  return nil
}

type SocialGraphServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SocialGraphService
}

func (p *SocialGraphServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SocialGraphServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SocialGraphServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSocialGraphServiceProcessor(handler SocialGraphService) *SocialGraphServiceProcessor {

  self310 := &SocialGraphServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self310.processorMap["GetFollowers"] = &socialGraphServiceProcessorGetFollowers{handler:handler}
  self310.processorMap["GetFollowees"] = &socialGraphServiceProcessorGetFollowees{handler:handler}
  self310.processorMap["Follow"] = &socialGraphServiceProcessorFollow{handler:handler}
  self310.processorMap["Unfollow"] = &socialGraphServiceProcessorUnfollow{handler:handler}
  self310.processorMap["FollowWithUsername"] = &socialGraphServiceProcessorFollowWithUsername{handler:handler}
  self310.processorMap["UnfollowWithUsername"] = &socialGraphServiceProcessorUnfollowWithUsername{handler:handler}
  self310.processorMap["InsertUser"] = &socialGraphServiceProcessorInsertUser{handler:handler}
return self310
}

func (p *SocialGraphServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x311 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x311.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x311

}

type socialGraphServiceProcessorGetFollowers struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorGetFollowers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceGetFollowersArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetFollowers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceGetFollowersResult{}
  var retval []int64
  if retval, err2 = p.handler.GetFollowers(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowers: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetFollowers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetFollowers", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorGetFollowees struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorGetFollowees) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceGetFolloweesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetFollowees", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceGetFolloweesResult{}
  var retval []int64
  if retval, err2 = p.handler.GetFollowees(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowees: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetFollowees", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetFollowees", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorFollow struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorFollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceFollowArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Follow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceFollowResult{}
  if err2 = p.handler.Follow(ctx, args.ReqID, args.UserID, args.FolloweeID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Follow: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "Follow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "Follow", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorUnfollow struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorUnfollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceUnfollowArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Unfollow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceUnfollowResult{}
  if err2 = p.handler.Unfollow(ctx, args.ReqID, args.UserID, args.FolloweeID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Unfollow: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "Unfollow", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "Unfollow", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorFollowWithUsername struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorFollowWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceFollowWithUsernameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "FollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceFollowWithUsernameResult{}
  if err2 = p.handler.FollowWithUsername(ctx, args.ReqID, args.UserUsernmae, args.FolloweeUsername, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FollowWithUsername: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "FollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "FollowWithUsername", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorUnfollowWithUsername struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorUnfollowWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceUnfollowWithUsernameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "UnfollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceUnfollowWithUsernameResult{}
  if err2 = p.handler.UnfollowWithUsername(ctx, args.ReqID, args.UserUsernmae, args.FolloweeUsername, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UnfollowWithUsername: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "UnfollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "UnfollowWithUsername", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorInsertUser struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorInsertUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceInsertUserArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "InsertUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SocialGraphServiceInsertUserResult{}
  if err2 = p.handler.InsertUser(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertUser: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "InsertUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "InsertUser", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type SocialGraphServiceGetFollowersArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceGetFollowersArgs() *SocialGraphServiceGetFollowersArgs {
  return &SocialGraphServiceGetFollowersArgs{}
}


func (p *SocialGraphServiceGetFollowersArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceGetFollowersArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceGetFollowersArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceGetFollowersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key312 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key312 = v
}
var _val313 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val313 = v
}
    p.Carrier[_key312] = _val313
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFollowersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFollowersArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFollowersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFollowersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type SocialGraphServiceGetFollowersResult struct {
  Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceGetFollowersResult() *SocialGraphServiceGetFollowersResult {
  return &SocialGraphServiceGetFollowersResult{}
}

var SocialGraphServiceGetFollowersResult_Success_DEFAULT []int64

func (p *SocialGraphServiceGetFollowersResult) GetSuccess() []int64 {
  return p.Success
}
var SocialGraphServiceGetFollowersResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceGetFollowersResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceGetFollowersResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceGetFollowersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SocialGraphServiceGetFollowersResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceGetFollowersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem314 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem314 = v
}
    p.Success = append(p.Success, _elem314)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFollowersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFollowersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFollowersResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type SocialGraphServiceGetFolloweesArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceGetFolloweesArgs() *SocialGraphServiceGetFolloweesArgs {
  return &SocialGraphServiceGetFolloweesArgs{}
}


func (p *SocialGraphServiceGetFolloweesArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceGetFolloweesArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceGetFolloweesArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceGetFolloweesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key315 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key315 = v
}
var _val316 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val316 = v
}
    p.Carrier[_key315] = _val316
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowees_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFolloweesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFolloweesArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFolloweesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFolloweesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type SocialGraphServiceGetFolloweesResult struct {
  Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceGetFolloweesResult() *SocialGraphServiceGetFolloweesResult {
  return &SocialGraphServiceGetFolloweesResult{}
}

var SocialGraphServiceGetFolloweesResult_Success_DEFAULT []int64

func (p *SocialGraphServiceGetFolloweesResult) GetSuccess() []int64 {
  return p.Success
}
var SocialGraphServiceGetFolloweesResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceGetFolloweesResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceGetFolloweesResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceGetFolloweesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SocialGraphServiceGetFolloweesResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceGetFolloweesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem317 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem317 = v
}
    p.Success = append(p.Success, _elem317)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetFollowees_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFolloweesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFolloweesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFolloweesResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
type SocialGraphServiceFollowArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  FolloweeID int64 `thrift:"followee_id,3" db:"followee_id" json:"followee_id"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceFollowArgs() *SocialGraphServiceFollowArgs {
  return &SocialGraphServiceFollowArgs{}
}


func (p *SocialGraphServiceFollowArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceFollowArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceFollowArgs) GetFolloweeID() int64 {
  return p.FolloweeID
}

func (p *SocialGraphServiceFollowArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceFollowArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeID = v
}
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key318 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key318 = v
}
var _val319 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val319 = v
}
    p.Carrier[_key318] = _val319
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceFollowArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Follow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followee_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FolloweeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceFollowResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceFollowResult() *SocialGraphServiceFollowResult {
  return &SocialGraphServiceFollowResult{}
}

var SocialGraphServiceFollowResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceFollowResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceFollowResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceFollowResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceFollowResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Follow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceFollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
type SocialGraphServiceUnfollowArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  FolloweeID int64 `thrift:"followee_id,3" db:"followee_id" json:"followee_id"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceUnfollowArgs() *SocialGraphServiceUnfollowArgs {
  return &SocialGraphServiceUnfollowArgs{}
}


func (p *SocialGraphServiceUnfollowArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceUnfollowArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceUnfollowArgs) GetFolloweeID() int64 {
  return p.FolloweeID
}

func (p *SocialGraphServiceUnfollowArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceUnfollowArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key320 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key320 = v
}
var _val321 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val321 = v
}
    p.Carrier[_key320] = _val321
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Unfollow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followee_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FolloweeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceUnfollowResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceUnfollowResult() *SocialGraphServiceUnfollowResult {
  return &SocialGraphServiceUnfollowResult{}
}

var SocialGraphServiceUnfollowResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceUnfollowResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceUnfollowResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceUnfollowResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceUnfollowResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Unfollow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceUnfollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
type SocialGraphServiceFollowWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserUsernmae string `thrift:"user_usernmae,2" db:"user_usernmae" json:"user_usernmae"`
  FolloweeUsername string `thrift:"followee_username,3" db:"followee_username" json:"followee_username"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceFollowWithUsernameArgs() *SocialGraphServiceFollowWithUsernameArgs {
  return &SocialGraphServiceFollowWithUsernameArgs{}
}


func (p *SocialGraphServiceFollowWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceFollowWithUsernameArgs) GetUserUsernmae() string {
  return p.UserUsernmae
}

func (p *SocialGraphServiceFollowWithUsernameArgs) GetFolloweeUsername() string {
  return p.FolloweeUsername
}

func (p *SocialGraphServiceFollowWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceFollowWithUsernameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserUsernmae = v
}
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeUsername = v
}
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key322 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key322 = v
}
var _val323 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val323 = v
}
    p.Carrier[_key322] = _val323
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_usernmae", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_usernmae: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserUsernmae)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_usernmae (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_usernmae: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followee_username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FolloweeUsername)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_username: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceFollowWithUsernameResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceFollowWithUsernameResult() *SocialGraphServiceFollowWithUsernameResult {
  return &SocialGraphServiceFollowWithUsernameResult{}
}

var SocialGraphServiceFollowWithUsernameResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceFollowWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceFollowWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceFollowWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceFollowWithUsernameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FollowWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowWithUsernameResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
type SocialGraphServiceUnfollowWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserUsernmae string `thrift:"user_usernmae,2" db:"user_usernmae" json:"user_usernmae"`
  FolloweeUsername string `thrift:"followee_username,3" db:"followee_username" json:"followee_username"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceUnfollowWithUsernameArgs() *SocialGraphServiceUnfollowWithUsernameArgs {
  return &SocialGraphServiceUnfollowWithUsernameArgs{}
}


func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetUserUsernmae() string {
  return p.UserUsernmae
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetFolloweeUsername() string {
  return p.FolloweeUsername
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceUnfollowWithUsernameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserUsernmae = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeUsername = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key324 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key324 = v
}
var _val325 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val325 = v
}
    p.Carrier[_key324] = _val325
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnfollowWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_usernmae", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_usernmae: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserUsernmae)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_usernmae (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_usernmae: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "followee_username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_username: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FolloweeUsername)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_username: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceUnfollowWithUsernameResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceUnfollowWithUsernameResult() *SocialGraphServiceUnfollowWithUsernameResult {
  return &SocialGraphServiceUnfollowWithUsernameResult{}
}

var SocialGraphServiceUnfollowWithUsernameResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceUnfollowWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceUnfollowWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceUnfollowWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UnfollowWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowWithUsernameResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type SocialGraphServiceInsertUserArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceInsertUserArgs() *SocialGraphServiceInsertUserArgs {
  return &SocialGraphServiceInsertUserArgs{}
}


func (p *SocialGraphServiceInsertUserArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceInsertUserArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceInsertUserArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceInsertUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceInsertUserArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceInsertUserArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key326 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key326 = v
}
var _val327 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val327 = v
}
    p.Carrier[_key326] = _val327
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InsertUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceInsertUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceInsertUserArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceInsertUserArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceInsertUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceInsertUserArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceInsertUserResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceInsertUserResult() *SocialGraphServiceInsertUserResult {
  return &SocialGraphServiceInsertUserResult{}
}

var SocialGraphServiceInsertUserResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceInsertUserResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceInsertUserResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceInsertUserResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceInsertUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InsertUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceInsertUserResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceInsertUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceInsertUserResult(%+v)", *p)
}


type UserMentionService interface {
  // Parameters:
  //  - ReqID
  //  - Usernames
  //  - Carrier
  ComposeUserMentions(ctx context.Context, req_id int64, usernames []string, carrier map[string]string) (_r []*UserMention, _err error)
}

type UserMentionServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUserMentionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserMentionServiceClient {
  return &UserMentionServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserMentionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserMentionServiceClient {
  return &UserMentionServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserMentionServiceClient(c thrift.TClient) *UserMentionServiceClient {
  return &UserMentionServiceClient{
    c: c,
  }
}

func (p *UserMentionServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UserMentionServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UserMentionServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Usernames
//  - Carrier
func (p *UserMentionServiceClient) ComposeUserMentions(ctx context.Context, req_id int64, usernames []string, carrier map[string]string) (_r []*UserMention, _err error) {
  var _args388 UserMentionServiceComposeUserMentionsArgs
  _args388.ReqID = req_id
  _args388.Usernames = usernames
  _args388.Carrier = carrier
  var _result390 UserMentionServiceComposeUserMentionsResult
  var _meta389 thrift.ResponseMeta
  _meta389, _err = p.Client_().Call(ctx, "ComposeUserMentions", &_args388, &_result390)
  p.SetLastResponseMeta_(_meta389)
  if _err != nil {
    return
  }
  switch {
  case _result390.Se!= nil:
    return _r, _result390.Se
  }

  return _result390.GetSuccess(), nil
}

type UserMentionServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserMentionService
}

func (p *UserMentionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserMentionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserMentionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserMentionServiceProcessor(handler UserMentionService) *UserMentionServiceProcessor {

  self391 := &UserMentionServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self391.processorMap["ComposeUserMentions"] = &userMentionServiceProcessorComposeUserMentions{handler:handler}
return self391
}

func (p *UserMentionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x392 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x392.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x392

}

type userMentionServiceProcessorComposeUserMentions struct {
  handler UserMentionService
}

func (p *userMentionServiceProcessorComposeUserMentions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserMentionServiceComposeUserMentionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeUserMentions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UserMentionServiceComposeUserMentionsResult{}
  var retval []*UserMention
  if retval, err2 = p.handler.ComposeUserMentions(ctx, args.ReqID, args.Usernames, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeUserMentions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeUserMentions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeUserMentions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Usernames
//  - Carrier
type UserMentionServiceComposeUserMentionsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Usernames []string `thrift:"usernames,2" db:"usernames" json:"usernames"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserMentionServiceComposeUserMentionsArgs() *UserMentionServiceComposeUserMentionsArgs {
  return &UserMentionServiceComposeUserMentionsArgs{}
}


func (p *UserMentionServiceComposeUserMentionsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserMentionServiceComposeUserMentionsArgs) GetUsernames() []string {
  return p.Usernames
}

func (p *UserMentionServiceComposeUserMentionsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserMentionServiceComposeUserMentionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Usernames =  tSlice
  for i := 0; i < size; i ++ {
var _elem393 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem393 = v
}
    p.Usernames = append(p.Usernames, _elem393)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key394 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key394 = v
}
var _val395 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val395 = v
}
    p.Carrier[_key394] = _val395
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeUserMentions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserMentionServiceComposeUserMentionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "usernames", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usernames: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Usernames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Usernames {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usernames: ", p), err) }
  return err
}

func (p *UserMentionServiceComposeUserMentionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserMentionServiceComposeUserMentionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMentionServiceComposeUserMentionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserMentionServiceComposeUserMentionsResult struct {
  Success []*UserMention `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserMentionServiceComposeUserMentionsResult() *UserMentionServiceComposeUserMentionsResult {
  return &UserMentionServiceComposeUserMentionsResult{}
}

var UserMentionServiceComposeUserMentionsResult_Success_DEFAULT []*UserMention

func (p *UserMentionServiceComposeUserMentionsResult) GetSuccess() []*UserMention {
  return p.Success
}
var UserMentionServiceComposeUserMentionsResult_Se_DEFAULT *ServiceException
func (p *UserMentionServiceComposeUserMentionsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserMentionServiceComposeUserMentionsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserMentionServiceComposeUserMentionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserMentionServiceComposeUserMentionsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserMentionServiceComposeUserMentionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem396 := &UserMention{}
    if err := _elem396.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem396), err)
    }
    p.Success = append(p.Success, _elem396)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeUserMentions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserMentionServiceComposeUserMentionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserMentionServiceComposeUserMentionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMentionServiceComposeUserMentionsResult(%+v)", *p)
}


type UrlShortenService interface {
  // Parameters:
  //  - ReqID
  //  - Urls
  //  - Carrier
  ComposeUrls(ctx context.Context, req_id int64, urls []string, carrier map[string]string) (_r []*URL, _err error)
  // Parameters:
  //  - ReqID
  //  - ShortenedUrls
  //  - Carrier
  GetExtendedUrls(ctx context.Context, req_id int64, shortened_urls []string, carrier map[string]string) (_r []string, _err error)
}

type UrlShortenServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewUrlShortenServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UrlShortenServiceClient {
  return &UrlShortenServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUrlShortenServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UrlShortenServiceClient {
  return &UrlShortenServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUrlShortenServiceClient(c thrift.TClient) *UrlShortenServiceClient {
  return &UrlShortenServiceClient{
    c: c,
  }
}

func (p *UrlShortenServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *UrlShortenServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *UrlShortenServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - Urls
//  - Carrier
func (p *UrlShortenServiceClient) ComposeUrls(ctx context.Context, req_id int64, urls []string, carrier map[string]string) (_r []*URL, _err error) {
  var _args410 UrlShortenServiceComposeUrlsArgs
  _args410.ReqID = req_id
  _args410.Urls = urls
  _args410.Carrier = carrier
  var _result412 UrlShortenServiceComposeUrlsResult
  var _meta411 thrift.ResponseMeta
  _meta411, _err = p.Client_().Call(ctx, "ComposeUrls", &_args410, &_result412)
  p.SetLastResponseMeta_(_meta411)
  if _err != nil {
    return
  }
  switch {
  case _result412.Se!= nil:
    return _r, _result412.Se
  }

  return _result412.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - ShortenedUrls
//  - Carrier
func (p *UrlShortenServiceClient) GetExtendedUrls(ctx context.Context, req_id int64, shortened_urls []string, carrier map[string]string) (_r []string, _err error) {
  var _args413 UrlShortenServiceGetExtendedUrlsArgs
  _args413.ReqID = req_id
  _args413.ShortenedUrls = shortened_urls
  _args413.Carrier = carrier
  var _result415 UrlShortenServiceGetExtendedUrlsResult
  var _meta414 thrift.ResponseMeta
  _meta414, _err = p.Client_().Call(ctx, "GetExtendedUrls", &_args413, &_result415)
  p.SetLastResponseMeta_(_meta414)
  if _err != nil {
    return
  }
  switch {
  case _result415.Se!= nil:
    return _r, _result415.Se
  }

  return _result415.GetSuccess(), nil
}

type UrlShortenServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UrlShortenService
}

func (p *UrlShortenServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UrlShortenServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UrlShortenServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUrlShortenServiceProcessor(handler UrlShortenService) *UrlShortenServiceProcessor {

  self416 := &UrlShortenServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self416.processorMap["ComposeUrls"] = &urlShortenServiceProcessorComposeUrls{handler:handler}
  self416.processorMap["GetExtendedUrls"] = &urlShortenServiceProcessorGetExtendedUrls{handler:handler}
return self416
}

func (p *UrlShortenServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x417 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x417.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x417

}

type urlShortenServiceProcessorComposeUrls struct {
  handler UrlShortenService
}

func (p *urlShortenServiceProcessorComposeUrls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UrlShortenServiceComposeUrlsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeUrls", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UrlShortenServiceComposeUrlsResult{}
  var retval []*URL
  if retval, err2 = p.handler.ComposeUrls(ctx, args.ReqID, args.Urls, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeUrls: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeUrls", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeUrls", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type urlShortenServiceProcessorGetExtendedUrls struct {
  handler UrlShortenService
}

func (p *urlShortenServiceProcessorGetExtendedUrls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UrlShortenServiceGetExtendedUrlsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "GetExtendedUrls", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := UrlShortenServiceGetExtendedUrlsResult{}
  var retval []string
  if retval, err2 = p.handler.GetExtendedUrls(ctx, args.ReqID, args.ShortenedUrls, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExtendedUrls: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "GetExtendedUrls", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "GetExtendedUrls", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Urls
//  - Carrier
type UrlShortenServiceComposeUrlsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Urls []string `thrift:"urls,2" db:"urls" json:"urls"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUrlShortenServiceComposeUrlsArgs() *UrlShortenServiceComposeUrlsArgs {
  return &UrlShortenServiceComposeUrlsArgs{}
}


func (p *UrlShortenServiceComposeUrlsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UrlShortenServiceComposeUrlsArgs) GetUrls() []string {
  return p.Urls
}

func (p *UrlShortenServiceComposeUrlsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UrlShortenServiceComposeUrlsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Urls =  tSlice
  for i := 0; i < size; i ++ {
var _elem418 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem418 = v
}
    p.Urls = append(p.Urls, _elem418)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key419 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key419 = v
}
var _val420 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val420 = v
}
    p.Carrier[_key419] = _val420
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeUrls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UrlShortenServiceComposeUrlsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "urls", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:urls: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Urls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Urls {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:urls: ", p), err) }
  return err
}

func (p *UrlShortenServiceComposeUrlsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UrlShortenServiceComposeUrlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceComposeUrlsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UrlShortenServiceComposeUrlsResult struct {
  Success []*URL `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUrlShortenServiceComposeUrlsResult() *UrlShortenServiceComposeUrlsResult {
  return &UrlShortenServiceComposeUrlsResult{}
}

var UrlShortenServiceComposeUrlsResult_Success_DEFAULT []*URL

func (p *UrlShortenServiceComposeUrlsResult) GetSuccess() []*URL {
  return p.Success
}
var UrlShortenServiceComposeUrlsResult_Se_DEFAULT *ServiceException
func (p *UrlShortenServiceComposeUrlsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UrlShortenServiceComposeUrlsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UrlShortenServiceComposeUrlsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UrlShortenServiceComposeUrlsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UrlShortenServiceComposeUrlsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem421 := &URL{}
    if err := _elem421.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem421), err)
    }
    p.Success = append(p.Success, _elem421)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeUrls_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceComposeUrlsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceComposeUrlsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceComposeUrlsResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ShortenedUrls
//  - Carrier
type UrlShortenServiceGetExtendedUrlsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  ShortenedUrls []string `thrift:"shortened_urls,2" db:"shortened_urls" json:"shortened_urls"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUrlShortenServiceGetExtendedUrlsArgs() *UrlShortenServiceGetExtendedUrlsArgs {
  return &UrlShortenServiceGetExtendedUrlsArgs{}
}


func (p *UrlShortenServiceGetExtendedUrlsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) GetShortenedUrls() []string {
  return p.ShortenedUrls
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UrlShortenServiceGetExtendedUrlsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ShortenedUrls =  tSlice
  for i := 0; i < size; i ++ {
var _elem422 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem422 = v
}
    p.ShortenedUrls = append(p.ShortenedUrls, _elem422)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key423 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key423 = v
}
var _val424 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val424 = v
}
    p.Carrier[_key423] = _val424
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetExtendedUrls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "shortened_urls", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shortened_urls: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ShortenedUrls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ShortenedUrls {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shortened_urls: ", p), err) }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceGetExtendedUrlsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UrlShortenServiceGetExtendedUrlsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUrlShortenServiceGetExtendedUrlsResult() *UrlShortenServiceGetExtendedUrlsResult {
  return &UrlShortenServiceGetExtendedUrlsResult{}
}

var UrlShortenServiceGetExtendedUrlsResult_Success_DEFAULT []string

func (p *UrlShortenServiceGetExtendedUrlsResult) GetSuccess() []string {
  return p.Success
}
var UrlShortenServiceGetExtendedUrlsResult_Se_DEFAULT *ServiceException
func (p *UrlShortenServiceGetExtendedUrlsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UrlShortenServiceGetExtendedUrlsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UrlShortenServiceGetExtendedUrlsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem425 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem425 = v
}
    p.Success = append(p.Success, _elem425)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetExtendedUrls_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceGetExtendedUrlsResult(%+v)", *p)
}


type MediaService interface {
  // Parameters:
  //  - ReqID
  //  - MediaTypes
  //  - MediaIds
  //  - Carrier
  ComposeMedia(ctx context.Context, req_id int64, media_types []string, media_ids []int64, carrier map[string]string) (_r []*Media, _err error)
}

type MediaServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMediaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MediaServiceClient {
  return &MediaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMediaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MediaServiceClient {
  return &MediaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMediaServiceClient(c thrift.TClient) *MediaServiceClient {
  return &MediaServiceClient{
    c: c,
  }
}

func (p *MediaServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MediaServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MediaServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ReqID
//  - MediaTypes
//  - MediaIds
//  - Carrier
func (p *MediaServiceClient) ComposeMedia(ctx context.Context, req_id int64, media_types []string, media_ids []int64, carrier map[string]string) (_r []*Media, _err error) {
  var _args452 MediaServiceComposeMediaArgs
  _args452.ReqID = req_id
  _args452.MediaTypes = media_types
  _args452.MediaIds = media_ids
  _args452.Carrier = carrier
  var _result454 MediaServiceComposeMediaResult
  var _meta453 thrift.ResponseMeta
  _meta453, _err = p.Client_().Call(ctx, "ComposeMedia", &_args452, &_result454)
  p.SetLastResponseMeta_(_meta453)
  if _err != nil {
    return
  }
  switch {
  case _result454.Se!= nil:
    return _r, _result454.Se
  }

  return _result454.GetSuccess(), nil
}

type MediaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MediaService
}

func (p *MediaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MediaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MediaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMediaServiceProcessor(handler MediaService) *MediaServiceProcessor {

  self455 := &MediaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self455.processorMap["ComposeMedia"] = &mediaServiceProcessorComposeMedia{handler:handler}
return self455
}

func (p *MediaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x456 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x456.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x456

}

type mediaServiceProcessorComposeMedia struct {
  handler MediaService
}

func (p *mediaServiceProcessorComposeMedia) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MediaServiceComposeMediaArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeMedia", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MediaServiceComposeMediaResult{}
  var retval []*Media
  if retval, err2 = p.handler.ComposeMedia(ctx, args.ReqID, args.MediaTypes, args.MediaIds, args.Carrier); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeMedia: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "ComposeMedia", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "ComposeMedia", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - MediaTypes
//  - MediaIds
//  - Carrier
type MediaServiceComposeMediaArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MediaTypes []string `thrift:"media_types,2" db:"media_types" json:"media_types"`
  MediaIds []int64 `thrift:"media_ids,3" db:"media_ids" json:"media_ids"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewMediaServiceComposeMediaArgs() *MediaServiceComposeMediaArgs {
  return &MediaServiceComposeMediaArgs{}
}


func (p *MediaServiceComposeMediaArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MediaServiceComposeMediaArgs) GetMediaTypes() []string {
  return p.MediaTypes
}

func (p *MediaServiceComposeMediaArgs) GetMediaIds() []int64 {
  return p.MediaIds
}

func (p *MediaServiceComposeMediaArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MediaServiceComposeMediaArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MediaTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem457 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem457 = v
}
    p.MediaTypes = append(p.MediaTypes, _elem457)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.MediaIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem458 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem458 = v
}
    p.MediaIds = append(p.MediaIds, _elem458)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key459 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key459 = v
}
var _val460 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val460 = v
}
    p.Carrier[_key459] = _val460
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeMedia_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaServiceComposeMediaArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media_types", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media_types: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MediaTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaTypes {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media_types: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "media_ids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:media_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.MediaIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:media_ids: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaServiceComposeMediaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type MediaServiceComposeMediaResult struct {
  Success []*Media `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMediaServiceComposeMediaResult() *MediaServiceComposeMediaResult {
  return &MediaServiceComposeMediaResult{}
}

var MediaServiceComposeMediaResult_Success_DEFAULT []*Media

func (p *MediaServiceComposeMediaResult) GetSuccess() []*Media {
  return p.Success
}
var MediaServiceComposeMediaResult_Se_DEFAULT *ServiceException
func (p *MediaServiceComposeMediaResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MediaServiceComposeMediaResult_Se_DEFAULT
  }
return p.Se
}
func (p *MediaServiceComposeMediaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MediaServiceComposeMediaResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MediaServiceComposeMediaResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MediaServiceComposeMediaResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Media, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem461 := &Media{}
    if err := _elem461.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem461), err)
    }
    p.Success = append(p.Success, _elem461)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MediaServiceComposeMediaResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ComposeMedia_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaServiceComposeMediaResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MediaServiceComposeMediaResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin(ctx, "se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MediaServiceComposeMediaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaServiceComposeMediaResult(%+v)", *p)
}


